# Generated by Neurodocker and Reproenv.
ARG CUDA_VERSION=12.1.0
ARG OS_VERSION=20.04
# Generated by Neurodocker and Reproenv.
FROM nvidia/cuda:${CUDA_VERSION}-base-ubuntu${OS_VERSION}
ENV DEBIAN_FRONTEND="noninteractive"
RUN chmod 777 /tmp
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  ca-certificates \
                  git \
                  netbase \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-py311_24.4.0-0" \
    PATH="/opt/miniconda-py311_24.4.0-0/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-py311_24.4.0-0/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py311_24.4.0-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-py311_24.4.0-0 \
    && rm -f "$conda_installer" \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.11" \
           "gxx_linux-64" \
           "notebook" \
           "numpy=1.26.4" \
           "git-annex" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN chmod 777 /opt/miniconda-py311_24.4.0-0/share
RUN test "$(getent passwd nonroot)" \
    || useradd --no-user-group --create-home --shell /bin/bash nonroot
USER nonroot
RUN pip install Pillow==9.5.0
WORKDIR /home/nonroot/voxelwise_tutorials
RUN pip install voxelwise_tutorials
RUN git clone --depth 1 https://github.com/gallantlab/voxelwise_tutorials.git
RUN CUDA_VER=$(echo "${CUDA_VERSION}" | sed 's/.$//' | tr -d '.') && pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu${CUDA_VER} 
RUN git config --global user.email 'you@example.com'
RUN git config --global user.name 'Your Name'

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod 777 /tmp" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "git", \
          "ca-certificates", \
          "netbase" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           netbase \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-py311_24.4.0-0", \
        "PATH": "/opt/miniconda-py311_24.4.0-0/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-py311_24.4.0-0/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py311_24.4.0-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-py311_24.4.0-0\\nrm -f \\"$conda_installer\\"\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.11\\" \\\\\\n    \\"gxx_linux-64\\" \\\\\\n    \\"notebook\\" \\\\\\n    \\"numpy=1.26.4\\" \\\\\\n    \\"git-annex\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "pip install Pillow==9.5.0" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/voxelwise_tutorials" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "pip install voxelwise_tutorials" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git clone --depth 1 https://github.com/gallantlab/voxelwise_tutorials.git" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "nonroot" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git config --global user.email '"'"'you@example.com'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git config --global user.name '"'"'Your Name'"'"'" \
      } \
    } \
  ] \
}' > /.reproenv.json
USER nonroot
# End saving to specification to JSON.
