# Generated by Neurodocker and Reproenv.

FROM nvcr.io/nvidia/cuda:10.2-base-ubuntu18.04
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
ENV DEBIAN_FRONTEND="noninteractive"
RUN chmod 777 /tmp
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  ca-certificates \
                  git \
                  netbase \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-py310_25.1.1-2" \
    PATH="/opt/miniconda-py310_25.1.1-2/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-py310_25.1.1-2/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.1.1-2-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-py310_25.1.1-2 \
    && rm -f "$conda_installer" \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "gxx_linux-64" \
           "notebook" \
           "jupyterlab" \
           "numpy<2" \
           "git-annex" \
           "ipywidgets" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN chmod 777 /opt/miniconda-py310_25.1.1-2/share
RUN python -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu102
RUN test "$(getent passwd voxelwise)" \
    || useradd --no-user-group --create-home --shell /bin/bash voxelwise
USER voxelwise
WORKDIR /home/voxelwise
RUN git clone https://github.com/gallantlab/voxelwise_tutorials.git --depth 1
RUN python -m pip install voxelwise_tutorials
RUN git config --global user.email 'you@example.com'
RUN git config --global user.name 'Your Name'
WORKDIR /home/voxelwise/voxelwise_tutorials/tutorials/notebooks/shortclips
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "nvcr.io/nvidia/cuda:10.2-base-ubuntu18.04" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod 777 /tmp" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "git", \
          "ca-certificates", \
          "netbase" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           netbase \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-py310_25.1.1-2", \
        "PATH": "/opt/miniconda-py310_25.1.1-2/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-py310_25.1.1-2/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.1.1-2-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-py310_25.1.1-2\\nrm -f \\"$conda_installer\\"\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"gxx_linux-64\\" \\\\\\n    \\"notebook\\" \\\\\\n    \\"jupyterlab\\" \\\\\\n    \\"numpy<2\\" \\\\\\n    \\"git-annex\\" \\\\\\n    \\"ipywidgets\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod 777 /opt/miniconda-py310_25.1.1-2/share" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "python -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu102" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "voxelwise" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/home/voxelwise" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git clone https://github.com/gallantlab/voxelwise_tutorials.git --depth 1" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "python -m pip install voxelwise_tutorials" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git config --global user.email '"'"'you@example.com'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git config --global user.name '"'"'Your Name'"'"'" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/home/voxelwise/voxelwise_tutorials/tutorials/notebooks/shortclips" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER voxelwise
# End saving to specification to JSON.
