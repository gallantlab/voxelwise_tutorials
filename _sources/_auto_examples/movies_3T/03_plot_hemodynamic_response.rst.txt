
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/movies_3T/03_plot_hemodynamic_response.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_movies_3T_03_plot_hemodynamic_response.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_movies_3T_03_plot_hemodynamic_response.py:


==================================
Visualize the hemodynamic response
==================================

In this example, we describe how the hemodynamic response is estimated in the
previous model. We fit the same ridge model as in the previous example, and
further describe the need to delay the features in time.

As explained in previous example, the BOLD signal recorded in fMRI experiments
is delayed in time with respect to the stimulus. With different delayed
versions of the features, the linear regression model weight each delayed
feature with a different weight, to maximize the predictions. With a sample
every 2 seconds, we typically use 4 delays [1, 2, 3, 4] to cover the most part
of the hemodynamic response peak.

In this example, we show the descrease in prediction performances when using no
delays. We also show how to visualize the estimated hemodynamic response
function (HRF) using more delays.

.. GENERATED FROM PYTHON SOURCE LINES 21-21

.. code-block:: default








.. GENERATED FROM PYTHON SOURCE LINES 23-24

Path of the data directory

.. GENERATED FROM PYTHON SOURCE LINES 24-29

.. code-block:: default

    import os
    from voxelwise_tutorials.io import get_data_home
    directory = os.path.join(get_data_home(), "vim-4")
    print(directory)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/jlg/mvdoc/voxelwise_tutorials_data/vim-4




.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default


    # modify to use another subject
    subject = "S01"








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Load the data
-------------

We first load the fMRI responses.

.. GENERATED FROM PYTHON SOURCE LINES 39-49

.. code-block:: default

    import numpy as np
    from voxelwise_tutorials.io import load_hdf5_array

    file_name = os.path.join(directory, "responses", f"{subject}_responses.hdf")
    Y_train = load_hdf5_array(file_name, key="Y_train")
    Y_test = load_hdf5_array(file_name, key="Y_test")

    print("(n_samples_train, n_voxels) =", Y_train.shape)
    print("(n_repeats, n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_voxels) = (3600, 84038)
    (n_repeats, n_samples_test, n_voxels) = (10, 270, 84038)




.. GENERATED FROM PYTHON SOURCE LINES 50-52

We average the test repeats, to remove the non-repeatable part of fMRI
responses.

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: default

    Y_test = Y_test.mean(0)

    print("(n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_test, n_voxels) = (270, 84038)




.. GENERATED FROM PYTHON SOURCE LINES 57-58

We fill potential NaN (not-a-number) values with zeros.

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default

    Y_train = np.nan_to_num(Y_train)
    Y_test = np.nan_to_num(Y_test)








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Then, we load the semantic "wordnet" features.

.. GENERATED FROM PYTHON SOURCE LINES 63-72

.. code-block:: default

    feature_space = "wordnet"

    file_name = os.path.join(directory, "features", f"{feature_space}.hdf")
    X_train = load_hdf5_array(file_name, key="X_train")
    X_test = load_hdf5_array(file_name, key="X_test")

    print("(n_samples_train, n_features) =", X_train.shape)
    print("(n_samples_test, n_features) =", X_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_features) = (3600, 1705)
    (n_samples_test, n_features) = (270, 1705)




.. GENERATED FROM PYTHON SOURCE LINES 73-78

Define the cross-validation scheme
----------------------------------

We define the same leave-one-run-out cross-validation split as in the
previous example.

.. GENERATED FROM PYTHON SOURCE LINES 78-86

.. code-block:: default


    from sklearn.model_selection import check_cv
    from voxelwise_tutorials.utils import generate_leave_one_run_out

    # indice of first sample of each run
    run_onsets = load_hdf5_array(file_name, key="run_onsets")
    print(run_onsets)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [   0  300  600  900 1200 1500 1800 2100 2400 2700 3000 3300]




.. GENERATED FROM PYTHON SOURCE LINES 87-88

We define a cross-validation splitter, compatible with ``scikit-learn`` API.

.. GENERATED FROM PYTHON SOURCE LINES 88-92

.. code-block:: default

    n_samples_train = X_train.shape[0]
    cv = generate_leave_one_run_out(n_samples_train, run_onsets)
    cv = check_cv(cv)  # copy the cross-validation splitter into a reusable list








.. GENERATED FROM PYTHON SOURCE LINES 93-98

Define the model
----------------

We define the same model as in the previous example. See the previous
example for more details about the model definition.

.. GENERATED FROM PYTHON SOURCE LINES 98-120

.. code-block:: default


    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    from voxelwise_tutorials.delayer import Delayer
    from himalaya.kernel_ridge import KernelRidgeCV
    from himalaya.backend import set_backend
    backend = set_backend("torch_cuda", on_error="warn")

    X_train = X_train.astype("float32")
    X_test = X_test.astype("float32")

    alphas = np.logspace(1, 20, 20)

    pipeline = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[1, 2, 3, 4]),
        KernelRidgeCV(
            alphas=alphas, cv=cv,
            solver_params=dict(n_targets_batch=500, n_alphas_batch=5,
                               n_targets_batch_refit=100)),
    )








.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default

    from sklearn import set_config
    set_config(display='diagram')  # requires scikit-learn 0.23
    pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 {color: black;background-color: white;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 pre{padding: 0;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-toggleable {background-color: white;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-item {z-index: 1;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-parallel-item:only-child::after {width: 0;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d585bcd1-9174-4abc-b284-b2907281d0e2 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-d585bcd1-9174-4abc-b284-b2907281d0e2" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7ea10381-7695-4069-8fe0-f3d88ff038e6" type="checkbox" ><label class="sk-toggleable__label" for="7ea10381-7695-4069-8fe0-f3d88ff038e6">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                    ('delayer', Delayer(delays=[1, 2, 3, 4])),
                    ('kernelridgecv',
                     KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                   cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3298, 3299]), array...])), (array([   0,    1, ..., 3598, 3599]), array([2100, 2101, ..., 2398, 2399])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149...1, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([3000, 3001, ..., 3298, 3299]))]),
                                   solver_params={'n_alphas_batch': 5,
                                                  'n_targets_batch': 500,
                                                  'n_targets_batch_refit': 100}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="336c5d10-2993-4c70-95c1-b77ec2e9956a" type="checkbox" ><label class="sk-toggleable__label" for="336c5d10-2993-4c70-95c1-b77ec2e9956a">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="85c2f8cc-e1ab-414c-b6e0-75718ac8b58f" type="checkbox" ><label class="sk-toggleable__label" for="85c2f8cc-e1ab-414c-b6e0-75718ac8b58f">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="351cae7b-e179-4e55-bcad-ebea4352c425" type="checkbox" ><label class="sk-toggleable__label" for="351cae7b-e179-4e55-bcad-ebea4352c425">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                  cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([2100, 2101, ..., 2398, 2399])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149...1, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([3000, 3001, ..., 3298, 3299]))]),
                  solver_params={'n_alphas_batch': 5, 'n_targets_batch': 500,
                                 'n_targets_batch_refit': 100})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 126-130

Fit the model
-------------

We fit on the train set, and score on the test set.

.. GENERATED FROM PYTHON SOURCE LINES 130-137

.. code-block:: default


    pipeline.fit(X_train, Y_train)

    scores = pipeline.score(X_test, Y_test)
    scores = backend.to_numpy(scores)
    print("(n_voxels,) =", scores.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_voxels,) = (84038,)




.. GENERATED FROM PYTHON SOURCE LINES 138-144

Compare with a model without delays
-----------------------------------

We define here another model without feature delays (i.e. no ``Delayer``).
Because the BOLD signal is inherently slow due to the dynamics of
neuro-vascular coupling, this model is unlikely to perform well.

.. GENERATED FROM PYTHON SOURCE LINES 144-154

.. code-block:: default


    pipeline_no_delay = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        KernelRidgeCV(
            alphas=alphas, cv=cv,
            solver_params=dict(n_targets_batch=500, n_alphas_batch=5,
                               n_targets_batch_refit=100)),
    )
    pipeline_no_delay






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 {color: black;background-color: white;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 pre{padding: 0;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-toggleable {background-color: white;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-estimator:hover {background-color: #d4ebff;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-item {z-index: 1;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-parallel-item:only-child::after {width: 0;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-1947e238-0547-4e78-a5a9-36c988b4ff54 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-1947e238-0547-4e78-a5a9-36c988b4ff54" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="13406236-c90f-4cd9-8f07-94938039a94d" type="checkbox" ><label class="sk-toggleable__label" for="13406236-c90f-4cd9-8f07-94938039a94d">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                    ('kernelridgecv',
                     KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                   cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([2100, 2101, ..., 2398, 2399])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149...1, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([3000, 3001, ..., 3298, 3299]))]),
                                   solver_params={'n_alphas_batch': 5,
                                                  'n_targets_batch': 500,
                                                  'n_targets_batch_refit': 100}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="426696a9-8466-49dc-9e8b-049fd5519b02" type="checkbox" ><label class="sk-toggleable__label" for="426696a9-8466-49dc-9e8b-049fd5519b02">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9729f7ea-f35e-42bd-8a92-0d175f9741f1" type="checkbox" ><label class="sk-toggleable__label" for="9729f7ea-f35e-42bd-8a92-0d175f9741f1">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                  cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([2100, 2101, ..., 2398, 2399])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149...1, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([3000, 3001, ..., 3298, 3299]))]),
                  solver_params={'n_alphas_batch': 5, 'n_targets_batch': 500,
                                 'n_targets_batch_refit': 100})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 155-156

We fit and score the model as the previous one.

.. GENERATED FROM PYTHON SOURCE LINES 156-161

.. code-block:: default

    pipeline_no_delay.fit(X_train, Y_train)
    scores_nodelay = pipeline_no_delay.score(X_test, Y_test)
    scores_nodelay = backend.to_numpy(scores_nodelay)
    print("(n_voxels,) =", scores_nodelay.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_voxels,) = (84038,)




.. GENERATED FROM PYTHON SOURCE LINES 162-167

Then, we plot the comparison of model performances with a 2D histogram.
All ~70k voxels are represented in this histogram, where the diagonal
corresponds to identical performance for both models. A distibution deviating
from the diagonal means that one model has better predictive performances
than the other.

.. GENERATED FROM PYTHON SOURCE LINES 167-178

.. code-block:: default

    import matplotlib.pyplot as plt
    from voxelwise_tutorials.viz import plot_hist2d

    ax = plot_hist2d(scores_nodelay, scores)
    ax.set(
        title='Generalization R2 scores',
        xlabel='model without delays',
        ylabel='model with delays',
    )
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_03_plot_hemodynamic_response_001.png
    :alt: Generalization R2 scores
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 179-184

We see that the model with delays performs much better than the model without
delays. This can be seen in voxels with scores above 0. The distribution
of scores below zero is not very informative, since it corresponds to voxels
with poor predictive performances anyway, and it only shows which model is
overfitting the most.

.. GENERATED FROM PYTHON SOURCE LINES 186-205

Visualize the HRF
-----------------

We just saw that delays are necessary to model BOLD responses. Here we show
how the fitted ridge regression weights follow the hemodynamic response
function (HRF).

Fitting a kernel ridge regression results in a set of coefficients called the
"dual" coefficients :math:`w`. These coefficients differ from the "primal"
coefficients :math:`\beta` obtained with a ridge regression, but the primal
coefficients can be computed from the dual coefficients using the training
features :math:`X`:

.. math::

    \beta = X^\top w

To better visualize the HRF, we will refit a model with more delays, but only
on a selection of voxels to speed up the computations.

.. GENERATED FROM PYTHON SOURCE LINES 205-244

.. code-block:: default


    # pick the 10 best voxels
    voxel_selection = np.argsort(scores)[-10:]

    # define a pipeline with more delays
    pipeline_more_delays = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[0, 1, 2, 3, 4, 5, 6]),
        KernelRidgeCV(
            alphas=alphas, cv=cv,
            solver_params=dict(n_targets_batch=500, n_alphas_batch=5,
                               n_targets_batch_refit=100)),
    )

    pipeline_more_delays.fit(X_train, Y_train[:, voxel_selection])

    # get the (primal) ridge regression coefficients
    primal_coef = pipeline_more_delays[-1].get_primal_coef()
    primal_coef = backend.to_numpy(primal_coef)

    # split the ridge coefficients per delays
    delayer = pipeline_more_delays.named_steps['delayer']
    primal_coef_per_delay = delayer.reshape_by_delays(primal_coef, axis=0)
    print("(n_delays, n_features, n_voxels) =", primal_coef_per_delay.shape)

    # select the feature with the largest coefficients for each voxel
    feature_selection = np.argmax(np.sum(np.abs(primal_coef_per_delay), axis=0),
                                  axis=0)
    primal_coef_selection = primal_coef_per_delay[:, feature_selection,
                                                  np.arange(len(voxel_selection))]

    plt.plot(delayer.delays, primal_coef_selection)
    plt.xlabel('Delays')
    plt.xticks(delayer.delays)
    plt.ylabel('Ridge coefficients')
    plt.title(f'Largest feature for the {len(voxel_selection)} best voxels')
    plt.axhline(0, color='k', linewidth=0.5)
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_03_plot_hemodynamic_response_002.png
    :alt: Largest feature for the 10 best voxels
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_delays, n_features, n_voxels) = (7, 1705, 10)




.. GENERATED FROM PYTHON SOURCE LINES 245-248

We see that the hemodynamic response function (HRF) is captured in the model
weights. Note that in this dataset, the brain responses are recorded every
two seconds.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  36.569 seconds)


.. _sphx_glr_download__auto_examples_movies_3T_03_plot_hemodynamic_response.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 03_plot_hemodynamic_response.py <03_plot_hemodynamic_response.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 03_plot_hemodynamic_response.ipynb <03_plot_hemodynamic_response.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
