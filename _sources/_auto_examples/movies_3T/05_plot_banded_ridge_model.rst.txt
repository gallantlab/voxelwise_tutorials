.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_movies_3T_05_plot_banded_ridge_model.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr__auto_examples_movies_3T_05_plot_banded_ridge_model.py:


=====================================================================
Fit a banded ridge model with both wordnet and motion energy features
=====================================================================

In this example, we model the fMRI responses with a `banded ridge regression`,
with two different feature spaces: motion energy, and wordnet categories.

*Banded ridge regression:* Since the relative scaling of both feature spaces is
unknown, we use two regularization hyperparameters (one per feature space) in a
model called banded ridge regression [1]_. Just like with ridge regression, we
optimize the hyperparameters over cross-validation. An efficient implementation
of this model is available in the `himalaya
<https://github.com/gallantlab/himalaya>`_ package.

*Running time:* This example is more computationally intensive than previous
examples. With a GPU backend, the fitting of this model takes around 6 minutes.
With a CPU backend, it can last 10 times more.


.. code-block:: default








Path of the data directory


.. code-block:: default

    import os
    from voxelwise_tutorials.io import get_data_home
    directory = os.path.join(get_data_home(), "vim-5")
    print(directory)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/jlg/tomdlt/voxelwise_tutorials_data/vim-5





.. code-block:: default


    # modify to use another subject
    subject = "S01"








Load the data
-------------

As in the previous examples, we first load the fMRI responses, which are our
regression targets.


.. code-block:: default

    import numpy as np

    from voxelwise_tutorials.io import load_hdf5_array

    file_name = os.path.join(directory, "responses", f"{subject}_responses.hdf")
    Y_train = load_hdf5_array(file_name, key="Y_train")
    Y_test = load_hdf5_array(file_name, key="Y_test")

    print("(n_samples_train, n_voxels) =", Y_train.shape)
    print("(n_repeats, n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_voxels) = (3600, 84038)
    (n_repeats, n_samples_test, n_voxels) = (10, 270, 84038)




We average the test repeats, to remove the non-repeatable part of fMRI
responses.


.. code-block:: default

    Y_test = Y_test.mean(0)

    print("(n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_test, n_voxels) = (270, 84038)




We fill potential NaN (not-a-number) values with zeros.


.. code-block:: default

    Y_train = np.nan_to_num(Y_train)
    Y_test = np.nan_to_num(Y_test)








And we make sure the targets are centered.


.. code-block:: default

    Y_train -= Y_train.mean(0)
    Y_test -= Y_test.mean(0)








Then we load both feature spaces, that are going to be used for the
linear regression model.


.. code-block:: default


    feature_names = ["wordnet", "motion_energy"]

    Xs_train = []
    Xs_test = []
    n_features_list = []
    for feature_space in feature_names:
        file_name = os.path.join(directory, "features", f"{feature_space}.hdf")
        Xi_train = load_hdf5_array(file_name, key="X_train")
        Xi_test = load_hdf5_array(file_name, key="X_test")

        Xs_train.append(Xi_train.astype(dtype="float32"))
        Xs_test.append(Xi_test.astype(dtype="float32"))
        n_features_list.append(Xi_train.shape[1])

    # concatenate the feature spaces
    X_train = np.concatenate(Xs_train, 1)
    X_test = np.concatenate(Xs_test, 1)

    print("(n_samples_train, n_features_total) =", X_train.shape)
    print("(n_samples_test, n_features_total) =", X_test.shape)
    print("[n_features_wordnet, n_features_motion_energy] =", n_features_list)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_features_total) = (3600, 8260)
    (n_samples_test, n_features_total) = (270, 8260)
    [n_features_wordnet, n_features_motion_energy] = [1705, 6555]




Define the cross-validation scheme
----------------------------------

We define again a leave-one-run-out cross-validation split scheme.


.. code-block:: default


    from sklearn.model_selection import check_cv
    from voxelwise_tutorials.utils import generate_leave_one_run_out

    # indice of first sample of each run
    run_onsets = load_hdf5_array(file_name, key="run_onsets")
    print(run_onsets)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [   0  300  600  900 1200 1500 1800 2100 2400 2700 3000 3300]




We define a cross-validation splitter, compatible with ``scikit-learn`` API.


.. code-block:: default

    n_samples_train = X_train.shape[0]
    cv = generate_leave_one_run_out(n_samples_train, run_onsets)
    cv = check_cv(cv)  # copy the cross-validation splitter into a reusable list








Define the model
----------------

The model pipeline contains similar steps than the pipeline from previous
examples. We remove the mean of each feature with a ``StandardScaler``,
and add delays with a ``Delayer``.


.. code-block:: default

    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    from voxelwise_tutorials.delayer import Delayer
    from himalaya.backend import set_backend
    backend = set_backend("torch_cuda", on_error="warn")








To fit the banded ridge model, we use ``himalaya``'s
``MultipleKernelRidgeCV`` model, with a separate linear kernel per feature
space. Similarly to ``KernelRidgeCV``, the model optimizes the
hyperparameters over cross-validation. However, while ``KernelRidgeCV`` has
to optimize only one hyperparameter (``alpha``), ``MultipleKernelRidgeCV``
has to optimize ``m`` hyperparameters, where ``m`` is the number of feature
spaces (here ``m = 2``). To do so, the model implements two different
solvers, one using hyperparameter random search, and one using hyperparameter
gradient descent. For large number of targets, we recommend using the
random-search solver.

The class takes a number of common parameters during initialization, such as
``kernels``, or ``solver``. Since the solver parameters are rather different
depending on the solver, they are passed in a ``solver_params`` dictionary
parameter.


.. code-block:: default


    from himalaya.kernel_ridge import MultipleKernelRidgeCV

    # Here we will use the "random_search" solver.
    solver = "random_search"

    # We can check its specific parameters in the function docstring:
    solver_function = MultipleKernelRidgeCV.ALL_SOLVERS[solver]
    print("Docstring of the function %s:" % solver_function.__name__)
    print(solver_function.__doc__)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Docstring of the function solve_multiple_kernel_ridge_random_search:
    Solve multiple kernel ridge regression using random search.

        Parameters
        ----------
        Ks : array of shape (n_kernels, n_samples, n_samples)
            Input kernels.
        Y : array of shape (n_samples, n_targets)
            Target data.
        n_iter : int, or array of shape (n_iter, n_kernels)
            Number of kernel weights combination to search.
            If an array is given, the solver uses it as the list of kernel weights
            to try, instead of sampling from a Dirichlet distribution.
        concentration : float, or list of float
            Concentration parameters of the Dirichlet distribution.
            If a list, iteratively cycle through the list.
            Not used if n_iter is an array.
        alphas : float or array of shape (n_alphas, )
            Range of ridge regularization parameter.
        score_func : callable
            Function used to compute the score of predictions versus Y.
        cv : int or scikit-learn splitter
            Cross-validation splitter. If an int, KFold is used.
        fit_intercept : boolean
            Whether to fit an intercept. If False, Ks should be centered
            (see KernelCenterer), and Y must be zero-mean over samples.
            Only available if return_weights == 'dual'.
        return_weights : None, 'primal', or 'dual'
            Whether to refit on the entire dataset and return the weights.
        Xs : array of shape (n_kernels, n_samples, n_features) or None
            Necessary if return_weights == 'primal'.
        local_alpha : bool
            If True, alphas are selected per target, else shared over all targets.
        jitter_alphas : bool
            If True, alphas range is slightly jittered for each gamma.
        random_state : int, or None
            Random generator seed. Use an int for deterministic search.
        n_targets_batch : int or None
            Size of the batch for over targets during cross-validation.
            Used for memory reasons. If None, uses all n_targets at once.
        n_targets_batch_refit : int or None
            Size of the batch for over targets during refit.
            Used for memory reasons. If None, uses all n_targets at once.
        n_alphas_batch : int or None
            Size of the batch for over alphas. Used for memory reasons.
            If None, uses all n_alphas at once.
        progress_bar : bool
            If True, display a progress bar over gammas.
        Ks_in_cpu : bool
            If True, keep Ks in CPU memory to limit GPU memory (slower).
            This feature is not available through the scikit-learn API.
        conservative : bool
            If True, when selecting the hyperparameter alpha, take the largest one
            that is less than one standard deviation away from the best.
            If False, take the best.
        Y_in_cpu : bool
            If True, keep the target values ``Y`` in CPU memory (slower).
        diagonalize_method : str in {"eigh", "svd"}
            Method used to diagonalize the kernel.
        return_alphas : bool
            If True, return the best alpha value for each target.

        Returns
        -------
        deltas : array of shape (n_kernels, n_targets)
            Best log kernel weights for each target.
        refit_weights : array or None
            Refit regression weights on the entire dataset, using selected best
            hyperparameters. Refit weights are always stored on CPU memory.
            If return_weights == 'primal', shape is (n_features, n_targets),
            if return_weights == 'dual', shape is (n_samples, n_targets),
            else, None.
        cv_scores : array of shape (n_iter, n_targets)
            Cross-validation scores per iteration, averaged over splits, for the
            best alpha. Cross-validation scores will always be on CPU memory.
        best_alphas : array of shape (n_targets, )
            Best alpha value per target. Only returned if return_alphas is True.
        intercept : array of shape (n_targets,)
            Intercept. Only returned when fit_intercept is True.
    




The hyperparameter random-search solver separates the hyperparameters into a
shared regularization ``alpha`` and a vector of positive kernel weights which
sum to one. This separation of hyperparameters allows to explore efficiently
a large grid of values for ``alpha`` for each sampled kernel weights vector.

We use *20* random-search iterations to have a reasonably fast example. To
have better results, especially for larger number of feature spaces, one
might need more iterations. (Note that there is currently no stopping
criterion in the random-search method.)


.. code-block:: default

    n_iter = 20

    alphas = np.logspace(1, 20, 20)








Batch parameters, used to reduce the necessary GPU memory. A larger value
will be a bit faster, but the solver might crash if it is out of memory.
Optimal values depend on the size of your dataset.


.. code-block:: default

    n_targets_batch = 200
    n_alphas_batch = 5
    n_targets_batch_refit = 200








We put all these parameters in a dictionary ``solver_params``, and define
the main estimator ``MultipleKernelRidgeCV``.


.. code-block:: default


    solver_params = dict(n_iter=n_iter, alphas=alphas,
                         n_targets_batch=n_targets_batch,
                         n_alphas_batch=n_alphas_batch,
                         n_targets_batch_refit=n_targets_batch_refit)

    mkr_model = MultipleKernelRidgeCV(kernels="precomputed", solver=solver,
                                      solver_params=solver_params, cv=cv)








We need a bit more work than in previous examples before defining the full
pipeline, since the banded ridge model requires `multiple` precomputed
kernels, one for each feature space. To compute them, we use the
``ColumnKernelizer``, which can create multiple kernels from different
column of your features array. ``ColumnKernelizer`` works similarly to
``scikit-learn``'s ``ColumnTransformer``, but instead of returning a
concatenation of transformed features, it returns a stack of kernels,
as required in ``MultipleKernelRidgeCV(kernels="precomputed")``.

First, we create a different ``Kernelizer`` for each feature space.
Here we use a linear kernel for all feature spaces, but ``ColumnKernelizer``
accepts any ``Kernelizer``, or ``scikit-learn`` ``Pipeline`` ending with a
``Kernelizer``.


.. code-block:: default

    from himalaya.kernel_ridge import Kernelizer
    from sklearn import set_config
    set_config(display='diagram')  # requires scikit-learn 0.23

    preprocess_pipeline = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[1, 2, 3, 4]),
        Kernelizer(kernel="linear"),
    )
    preprocess_pipeline






.. only:: builder_html

    .. raw:: html

        <style>#sk-b751083c-9ddc-4663-91de-19dea701e4ff {color: black;background-color: white;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff pre{padding: 0;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-toggleable {background-color: white;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-estimator:hover {background-color: #d4ebff;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-item {z-index: 1;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-parallel-item:only-child::after {width: 0;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-b751083c-9ddc-4663-91de-19dea701e4ff div.sk-container {display: inline-block;position: relative;}</style><div id="sk-b751083c-9ddc-4663-91de-19dea701e4ff" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0592d661-f349-4e83-a92b-24ce557b8d52" type="checkbox" ><label class="sk-toggleable__label" for="0592d661-f349-4e83-a92b-24ce557b8d52">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                        ('delayer', Delayer(delays=[1, 2, 3, 4])),
                        ('kernelizer', Kernelizer())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7b00625f-668c-4d60-b2ac-928ced0db03f" type="checkbox" ><label class="sk-toggleable__label" for="7b00625f-668c-4d60-b2ac-928ced0db03f">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d5e62aec-1468-45a1-b992-36459685408d" type="checkbox" ><label class="sk-toggleable__label" for="d5e62aec-1468-45a1-b992-36459685408d">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6ad63b6f-8163-4c5a-8697-1ede27b1a43a" type="checkbox" ><label class="sk-toggleable__label" for="6ad63b6f-8163-4c5a-8697-1ede27b1a43a">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div>
        <br />
        <br />

The column kernelizer applies a different pipeline on each selection of
features, here defined with ``slices``.


.. code-block:: default

    from himalaya.kernel_ridge import ColumnKernelizer

    # Find the start and end of each feature space in the concatenated ``X_train``.
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]
    slices





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [slice(0, 1705, None), slice(1705, 8260, None)]




.. code-block:: default

    kernelizers_tuples = [(name, preprocess_pipeline, slice_)
                          for name, slice_ in zip(feature_names, slices)]
    column_kernelizer = ColumnKernelizer(kernelizers_tuples)
    column_kernelizer

    # (Note that ``ColumnKernelizer`` has a parameter ``n_jobs`` to parallelize
    # each ``Kernelizer``, yet such parallelism does not work with GPU arrays.)






.. only:: builder_html

    .. raw:: html

        <style>#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 {color: black;background-color: white;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 pre{padding: 0;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-toggleable {background-color: white;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-item {z-index: 1;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-parallel-item:only-child::after {width: 0;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-08bfe6f9-0cac-48f5-8e19-46351b2fe8f6" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="88af4943-51cc-4a49-ad4f-e4938298d2cc" type="checkbox" ><label class="sk-toggleable__label" for="88af4943-51cc-4a49-ad4f-e4938298d2cc">ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('wordnet',
                                        Pipeline(steps=[('standardscaler',
                                                         StandardScaler(with_std=False)),
                                                        ('delayer',
                                                         Delayer(delays=[1, 2, 3, 4])),
                                                        ('kernelizer', Kernelizer())]),
                                        slice(0, 1705, None)),
                                       ('motion_energy',
                                        Pipeline(steps=[('standardscaler',
                                                         StandardScaler(with_std=False)),
                                                        ('delayer',
                                                         Delayer(delays=[1, 2, 3, 4])),
                                                        ('kernelizer', Kernelizer())]),
                                        slice(1705, 8260, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1707bab7-7365-4a8f-995e-d83c8f1b26f5" type="checkbox" ><label class="sk-toggleable__label" for="1707bab7-7365-4a8f-995e-d83c8f1b26f5">wordnet</label><div class="sk-toggleable__content"><pre>slice(0, 1705, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="105306f1-b7c9-416b-8330-65e715e99e11" type="checkbox" ><label class="sk-toggleable__label" for="105306f1-b7c9-416b-8330-65e715e99e11">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1c610ada-2c67-4085-baf1-46ebb300d676" type="checkbox" ><label class="sk-toggleable__label" for="1c610ada-2c67-4085-baf1-46ebb300d676">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="34de1985-9f2e-493c-a219-c73d94e83c6b" type="checkbox" ><label class="sk-toggleable__label" for="34de1985-9f2e-493c-a219-c73d94e83c6b">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="293e86fb-7b46-4b38-8b4b-0accceeddb11" type="checkbox" ><label class="sk-toggleable__label" for="293e86fb-7b46-4b38-8b4b-0accceeddb11">motion_energy</label><div class="sk-toggleable__content"><pre>slice(1705, 8260, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f3d734d9-0c6d-4296-a0b2-26a3fd319acd" type="checkbox" ><label class="sk-toggleable__label" for="f3d734d9-0c6d-4296-a0b2-26a3fd319acd">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8837afcd-4deb-4d2e-ad62-cedbad37f55a" type="checkbox" ><label class="sk-toggleable__label" for="8837afcd-4deb-4d2e-ad62-cedbad37f55a">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5de2dc00-4945-4a9b-875f-bc6652254d36" type="checkbox" ><label class="sk-toggleable__label" for="5de2dc00-4945-4a9b-875f-bc6652254d36">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
        <br />
        <br />

Then we can define the model pipeline.


.. code-block:: default


    pipeline = make_pipeline(
        column_kernelizer,
        mkr_model,
    )
    pipeline






.. only:: builder_html

    .. raw:: html

        <style>#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 {color: black;background-color: white;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 pre{padding: 0;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-toggleable {background-color: white;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-item {z-index: 1;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-parallel-item:only-child::after {width: 0;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7a7419ae-75a3-440e-bc81-9422e4da5949 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-7a7419ae-75a3-440e-bc81-9422e4da5949" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9ff3ee3f-9450-4972-9251-91a304c225b2" type="checkbox" ><label class="sk-toggleable__label" for="9ff3ee3f-9450-4972-9251-91a304c225b2">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columnkernelizer',
                         ColumnKernelizer(transformers=[('wordnet',
                                                         Pipeline(steps=[('standardscaler',
                                                                          StandardScaler(with_std=False)),
                                                                         ('delayer',
                                                                          Delayer(delays=[1,
                                                                                          2,
                                                                                          3,
                                                                                          4])),
                                                                         ('kernelizer',
                                                                          Kernelizer())]),
                                                         slice(0, 1705, None)),
                                                        ('motion_energy',
                                                         Pipeline(steps=[('standardscaler',
                                                                          StandardScaler(with_std=False)),
                                                                         ('delayer',
                                                                          Delayer(delays=[1,
                                                                                          2,
                                                                                          3,
                                                                                          4]...
                         MultipleKernelRidgeCV(cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([600, 601, ..., 898, 899])), (array([   0,    1, ..., 3598, 3599]), array([ 900,  901, ..., 1198, 1199])), (array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, ...  1, ..., 298, 299])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099]))]),
                                               kernels='precomputed',
                                               solver_params={'alphas': array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
               1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
               1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                                              'n_alphas_batch': 5,
                                                              'n_iter': 20,
                                                              'n_targets_batch': 200,
                                                              'n_targets_batch_refit': 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fe861daf-fe6e-4fca-939c-a18cbf44bb35" type="checkbox" ><label class="sk-toggleable__label" for="fe861daf-fe6e-4fca-939c-a18cbf44bb35">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('wordnet',
                                        Pipeline(steps=[('standardscaler',
                                                         StandardScaler(with_std=False)),
                                                        ('delayer',
                                                         Delayer(delays=[1, 2, 3, 4])),
                                                        ('kernelizer', Kernelizer())]),
                                        slice(0, 1705, None)),
                                       ('motion_energy',
                                        Pipeline(steps=[('standardscaler',
                                                         StandardScaler(with_std=False)),
                                                        ('delayer',
                                                         Delayer(delays=[1, 2, 3, 4])),
                                                        ('kernelizer', Kernelizer())]),
                                        slice(1705, 8260, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5e75b15e-8678-4473-91f5-7ac45101d75f" type="checkbox" ><label class="sk-toggleable__label" for="5e75b15e-8678-4473-91f5-7ac45101d75f">wordnet</label><div class="sk-toggleable__content"><pre>slice(0, 1705, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a1b015dd-87e7-4143-898a-31bfc2963201" type="checkbox" ><label class="sk-toggleable__label" for="a1b015dd-87e7-4143-898a-31bfc2963201">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f1525d24-cad2-41ed-a417-86f44c5bc1e0" type="checkbox" ><label class="sk-toggleable__label" for="f1525d24-cad2-41ed-a417-86f44c5bc1e0">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="624d1d8a-f0c1-4137-97c2-5880bd332047" type="checkbox" ><label class="sk-toggleable__label" for="624d1d8a-f0c1-4137-97c2-5880bd332047">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="70d009c7-7554-460a-8d5c-279c20ca0902" type="checkbox" ><label class="sk-toggleable__label" for="70d009c7-7554-460a-8d5c-279c20ca0902">motion_energy</label><div class="sk-toggleable__content"><pre>slice(1705, 8260, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b8267a50-f996-474f-8e74-19954bef80d3" type="checkbox" ><label class="sk-toggleable__label" for="b8267a50-f996-474f-8e74-19954bef80d3">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ad2c7b69-f64c-4269-a402-76396ceda1ff" type="checkbox" ><label class="sk-toggleable__label" for="ad2c7b69-f64c-4269-a402-76396ceda1ff">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ecdb149f-697f-463d-8884-8aab114b6961" type="checkbox" ><label class="sk-toggleable__label" for="ecdb149f-697f-463d-8884-8aab114b6961">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eea0e437-4d82-406a-b0a0-0ad5cb476d1d" type="checkbox" ><label class="sk-toggleable__label" for="eea0e437-4d82-406a-b0a0-0ad5cb476d1d">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([600, 601, ..., 898, 899])), (array([   0,    1, ..., 3598, 3599]), array([ 900,  901, ..., 1198, 1199])), (array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, ...  1, ..., 298, 299])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099]))]),
                              kernels='precomputed',
                              solver_params={'alphas': array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
               1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
               1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                             'n_alphas_batch': 5, 'n_iter': 20,
                                             'n_targets_batch': 200,
                                             'n_targets_batch_refit': 200})</pre></div></div></div></div></div></div></div>
        <br />
        <br />

Fit the model
-------------

We fit on the train set, and score on the test set.

With a GPU backend, the fitting of this model takes around 6 minutes. With a
CPU backend, it can last 10 times more.


.. code-block:: default


    pipeline.fit(X_train, Y_train)

    scores = pipeline.score(X_test, Y_test)
    scores = backend.to_numpy(scores)

    print("(n_voxels,) =", scores.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 20 random sampling with cv |     [..                                      ] 5% | 23.59 sec | 20 random sampling with cv |     [....                                    ] 10% | 42.47 sec | 20 random sampling with cv |     [......                                  ] 15% | 61.85 sec | 20 random sampling with cv |     [........                                ] 20% | 80.55 sec | 20 random sampling with cv |     [..........                              ] 25% | 99.84 sec | 20 random sampling with cv |     [............                            ] 30% | 118.54 sec | 20 random sampling with cv |     [..............                          ] 35% | 137.71 sec | 20 random sampling with cv |     [................                        ] 40% | 157.15 sec | 20 random sampling with cv |     [..................                      ] 45% | 176.29 sec | 20 random sampling with cv |     [....................                    ] 50% | 195.40 sec | 20 random sampling with cv |     [......................                  ] 55% | 215.20 sec | 20 random sampling with cv |     [........................                ] 60% | 234.47 sec | 20 random sampling with cv |     [..........................              ] 65% | 253.42 sec | 20 random sampling with cv |     [............................            ] 70% | 272.43 sec | 20 random sampling with cv |     [..............................          ] 75% | 291.34 sec | 20 random sampling with cv |     [................................        ] 80% | 310.50 sec | 20 random sampling with cv |     [..................................      ] 85% | 329.83 sec | 20 random sampling with cv |     [....................................    ] 90% | 349.03 sec | 20 random sampling with cv |     [......................................  ] 95% | 368.12 sec | 20 random sampling with cv |     [........................................] 100% | 387.14 sec | 20 random sampling with cv | 
    (n_voxels,) = (84038,)




Compare with a ridge model
--------------------------

We can compare with a baseline model, which does not use one hyperparameter
per feature space, but instead shares the same hyperparameter for all feature
spaces.


.. code-block:: default


    from himalaya.kernel_ridge import KernelRidgeCV

    pipeline_baseline = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[1, 2, 3, 4]),
        KernelRidgeCV(
            alphas=alphas, cv=cv,
            solver_params=dict(n_targets_batch=n_targets_batch,
                               n_alphas_batch=n_alphas_batch,
                               n_targets_batch_refit=n_targets_batch_refit)),
    )
    pipeline_baseline






.. only:: builder_html

    .. raw:: html

        <style>#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 {color: black;background-color: white;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 pre{padding: 0;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-toggleable {background-color: white;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-item {z-index: 1;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-parallel-item:only-child::after {width: 0;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-7a8351b4-14da-48d0-a2c3-b227f5f95d89" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="64ef9391-2645-4f1c-b22d-4cf6e7c5fecc" type="checkbox" ><label class="sk-toggleable__label" for="64ef9391-2645-4f1c-b22d-4cf6e7c5fecc">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                        ('delayer', Delayer(delays=[1, 2, 3, 4])),
                        ('kernelridgecv',
                         KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
               1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
               1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                       cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array...9])), (array([   0,    1, ..., 3598, 3599]), array([ 900,  901, ..., 1198, 1199])), (array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, ...  1, ..., 298, 299])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099]))]),
                                       solver_params={'n_alphas_batch': 5,
                                                      'n_targets_batch': 200,
                                                      'n_targets_batch_refit': 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9d317677-1621-4bee-83bd-e40d655454ad" type="checkbox" ><label class="sk-toggleable__label" for="9d317677-1621-4bee-83bd-e40d655454ad">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="668b6a8d-d04a-4059-9543-f84b45ef7438" type="checkbox" ><label class="sk-toggleable__label" for="668b6a8d-d04a-4059-9543-f84b45ef7438">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="04860778-a309-4977-8fb8-225f942d41ac" type="checkbox" ><label class="sk-toggleable__label" for="04860778-a309-4977-8fb8-225f942d41ac">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
               1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
               1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                      cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([600, 601, ..., 898, 899])), (array([   0,    1, ..., 3598, 3599]), array([ 900,  901, ..., 1198, 1199])), (array([   0,    1, ..., 3298, 3299]), array([3300, 3301, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, ...  1, ..., 298, 299])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099]))]),
                      solver_params={'n_alphas_batch': 5, 'n_targets_batch': 200,
                                     'n_targets_batch_refit': 200})</pre></div></div></div></div></div></div></div>
        <br />
        <br />


.. code-block:: default

    pipeline_baseline.fit(X_train, Y_train)
    scores_baseline = pipeline_baseline.score(X_test, Y_test)
    scores_baseline = backend.to_numpy(scores_baseline)








Here we plot the comparison of model performances with a 2D histogram.
All 70k voxels are represented in this histogram, where the diagonal
corresponds to identical performance for both models. A distibution deviating
from the diagonal means that one model has better predictive performances
than the other.


.. code-block:: default

    import matplotlib.pyplot as plt
    from voxelwise_tutorials.viz import plot_hist2d

    ax = plot_hist2d(scores_baseline, scores)
    ax.set(title='Generalization R2 scores', xlabel='KernelRidgeCV',
           ylabel='MultipleKernelRidgeCV')
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_05_plot_banded_ridge_model_001.png
    :alt: Generalization R2 scores
    :class: sphx-glr-single-img





We see that the banded ridge model (``MultipleKernelRidgeCV``) outperforms
the ridge model (``KernelRidegeCV``). Indeed, banded ridge regression is able
to find the optimal scalings of each feature space, independently on each
voxel. Banded ridge regression is thus able to perform a soft selection
between the available feature spaces, based on the cross-validation
performances.

Plot the banded ridge split
---------------------------

On top of better performances, banded ridge regression also gives a way to
disentangle the two feature spaces. To do so, we take the kernel weights and
the ridge (dual) weights corresponding to each feature space, and use them to
split the prediction on each feature space.

.. math::

      \hat{y} = \sum_i^m \hat{y}_i = \sum_i^m \gamma_i K_i \hat{w}

Then, we use these split predictions to compute split math:`\tilde{R}^2_i`
scores, corrected so that there sum is equal to the math:`R^2` score of the
full prediction math:`\hat{y}`.


.. code-block:: default


    from himalaya.scoring import r2_score_split

    Y_test_pred_split = pipeline.predict(X_test, split=True)
    split_scores = r2_score_split(Y_test, Y_test_pred_split)
    split_scores.shape

    print("(n_kernels, n_samples_test, n_voxels) =", Y_test_pred_split.shape)
    print("(n_kernels, n_voxels) =", split_scores.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_kernels, n_samples_test, n_voxels) = torch.Size([2, 270, 84038])
    (n_kernels, n_voxels) = torch.Size([2, 84038])




We can then plot the split scores on a flatmap with a 2D colormap.


.. code-block:: default


    from voxelwise_tutorials.viz import plot_2d_flatmap_from_mapper

    mapper_file = os.path.join(directory, "mappers", f"{subject}_mappers.hdf")
    ax = plot_2d_flatmap_from_mapper(split_scores[0], split_scores[1],
                                     mapper_file, vmin=0, vmax=0.25, vmin2=0,
                                     vmax2=0.5, label_1=feature_names[0],
                                     label_2=feature_names[1])
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_05_plot_banded_ridge_model_002.png
    :alt: 05 plot banded ridge model
    :class: sphx-glr-single-img





The blue regions are predicted using the motion-energy features, the orange
regions are predicted using the wordnet features, and the white regions are
well predicted using both feature spaces.

Compared to the last figure of the previous example, we see that most white
regions have been replaced by either blue or orange regions. Indeed, the
banded ridge regression disentangled the two feature spaces in voxels where
both feature spaces had good performances (see previous example). The
disentanglement is consistent with prior knowledge. For example, the
motion-energy features are selected in the early visual cortex, while the
wordnet features are selected in the semantic visual areas. For more
discussions about these results, we refer the reader to the original
publication [1]_.

References
----------

.. [1] Nunez-Elizalde, A. O., Huth, A. G., & Gallant, J. L. (2019).
    Voxelwise encoding models with non-spherical multivariate normal priors.
    Neuroimage, 197, 482-492.


.. code-block:: default


    del pipeline, pipeline_baseline








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  8.100 seconds)


.. _sphx_glr_download__auto_examples_movies_3T_05_plot_banded_ridge_model.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 05_plot_banded_ridge_model.py <05_plot_banded_ridge_model.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 05_plot_banded_ridge_model.ipynb <05_plot_banded_ridge_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
