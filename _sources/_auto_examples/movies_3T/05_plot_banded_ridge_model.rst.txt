
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/movies_3T/05_plot_banded_ridge_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_movies_3T_05_plot_banded_ridge_model.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_movies_3T_05_plot_banded_ridge_model.py:


=====================================================================
Fit a banded ridge model with both wordnet and motion energy features
=====================================================================

In this example, we model the fMRI responses with a `banded ridge regression`,
with two different feature spaces: motion energy and wordnet categories.

*Banded ridge regression:* Since the relative scaling of both feature spaces is
unknown, we use two regularization hyperparameters (one per feature space) in a
model called banded ridge regression [1]_. Just like with ridge regression, we
optimize the hyperparameters over cross-validation. An efficient implementation
of this model is available in the `himalaya
<https://github.com/gallantlab/himalaya>`_ package.

*Running time:* This example is more computationally intensive than the previous
examples. With a GPU backend, model fitting takes around 6 minutes.
With a CPU backend, it can last 10 times more.

.. GENERATED FROM PYTHON SOURCE LINES 20-20

.. code-block:: default








.. GENERATED FROM PYTHON SOURCE LINES 22-24

Path of the data directory
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 24-29

.. code-block:: default

    import os
    from voxelwise_tutorials.io import get_data_home
    directory = os.path.join(get_data_home(), "vim-5")
    print(directory)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/jlg/mvdoc/voxelwise_tutorials_data/vim-5




.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default


    # modify to use another subject
    subject = "S01"








.. GENERATED FROM PYTHON SOURCE LINES 35-40

Load the data
-------------

As in the previous examples, we first load the fMRI responses, which are our
regression targets.

.. GENERATED FROM PYTHON SOURCE LINES 40-51

.. code-block:: default

    import numpy as np

    from voxelwise_tutorials.io import load_hdf5_array

    file_name = os.path.join(directory, "responses", f"{subject}_responses.hdf")
    Y_train = load_hdf5_array(file_name, key="Y_train")
    Y_test = load_hdf5_array(file_name, key="Y_test")

    print("(n_samples_train, n_voxels) =", Y_train.shape)
    print("(n_repeats, n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_voxels) = (3600, 84038)
    (n_repeats, n_samples_test, n_voxels) = (10, 270, 84038)




.. GENERATED FROM PYTHON SOURCE LINES 52-54

We average the test repeats, to remove the non-repeatable part of fMRI
responses.

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: default

    Y_test = Y_test.mean(0)

    print("(n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_test, n_voxels) = (270, 84038)




.. GENERATED FROM PYTHON SOURCE LINES 59-60

We fill potential NaN (not-a-number) values with zeros.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    Y_train = np.nan_to_num(Y_train)
    Y_test = np.nan_to_num(Y_test)








.. GENERATED FROM PYTHON SOURCE LINES 64-65

And we make sure the targets are centered.

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    Y_train -= Y_train.mean(0)
    Y_test -= Y_test.mean(0)








.. GENERATED FROM PYTHON SOURCE LINES 69-71

Then we load both feature spaces, that are going to be used for the
linear regression model.

.. GENERATED FROM PYTHON SOURCE LINES 71-94

.. code-block:: default


    feature_names = ["wordnet", "motion_energy"]

    Xs_train = []
    Xs_test = []
    n_features_list = []
    for feature_space in feature_names:
        file_name = os.path.join(directory, "features", f"{feature_space}.hdf")
        Xi_train = load_hdf5_array(file_name, key="X_train")
        Xi_test = load_hdf5_array(file_name, key="X_test")

        Xs_train.append(Xi_train.astype(dtype="float32"))
        Xs_test.append(Xi_test.astype(dtype="float32"))
        n_features_list.append(Xi_train.shape[1])

    # concatenate the feature spaces
    X_train = np.concatenate(Xs_train, 1)
    X_test = np.concatenate(Xs_test, 1)

    print("(n_samples_train, n_features_total) =", X_train.shape)
    print("(n_samples_test, n_features_total) =", X_test.shape)
    print("[n_features_wordnet, n_features_motion_energy] =", n_features_list)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_features_total) = (3600, 8260)
    (n_samples_test, n_features_total) = (270, 8260)
    [n_features_wordnet, n_features_motion_energy] = [1705, 6555]




.. GENERATED FROM PYTHON SOURCE LINES 95-99

Define the cross-validation scheme
----------------------------------

We define again a leave-one-run-out cross-validation split scheme.

.. GENERATED FROM PYTHON SOURCE LINES 99-107

.. code-block:: default


    from sklearn.model_selection import check_cv
    from voxelwise_tutorials.utils import generate_leave_one_run_out

    # indice of first sample of each run
    run_onsets = load_hdf5_array(file_name, key="run_onsets")
    print(run_onsets)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [   0  300  600  900 1200 1500 1800 2100 2400 2700 3000 3300]




.. GENERATED FROM PYTHON SOURCE LINES 108-109

We define a cross-validation splitter, compatible with ``scikit-learn`` API.

.. GENERATED FROM PYTHON SOURCE LINES 109-113

.. code-block:: default

    n_samples_train = X_train.shape[0]
    cv = generate_leave_one_run_out(n_samples_train, run_onsets)
    cv = check_cv(cv)  # copy the cross-validation splitter into a reusable list








.. GENERATED FROM PYTHON SOURCE LINES 114-120

Define the model
----------------

The model pipeline contains similar steps than the pipeline from previous
examples. We remove the mean of each feature with a ``StandardScaler``,
and add delays with a ``Delayer``.

.. GENERATED FROM PYTHON SOURCE LINES 120-126

.. code-block:: default

    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    from voxelwise_tutorials.delayer import Delayer
    from himalaya.backend import set_backend
    backend = set_backend("torch_cuda", on_error="warn")








.. GENERATED FROM PYTHON SOURCE LINES 127-137

To fit the banded ridge model, we use ``himalaya``'s
``MultipleKernelRidgeCV`` model, with a separate linear kernel per feature
space. Similarly to ``KernelRidgeCV``, the model optimizes the
hyperparameters over cross-validation. However, while ``KernelRidgeCV`` has
to optimize only one hyperparameter (``alpha``), ``MultipleKernelRidgeCV``
has to optimize ``m`` hyperparameters, where ``m`` is the number of feature
spaces (here ``m = 2``). To do so, the model implements two different
solvers, one using hyperparameter random search, and one using hyperparameter
gradient descent. For large number of targets, we recommend using the
random-search solver.

.. GENERATED FROM PYTHON SOURCE LINES 139-142

The class takes a number of common parameters during initialization, such as
``kernels``, or ``solver``. Since the solver parameters vary depending on the
solver used, they are passed as a ``solver_params`` dictionary.

.. GENERATED FROM PYTHON SOURCE LINES 142-153

.. code-block:: default


    from himalaya.kernel_ridge import MultipleKernelRidgeCV

    # Here we will use the "random_search" solver.
    solver = "random_search"

    # We can check its specific parameters in the function docstring:
    solver_function = MultipleKernelRidgeCV.ALL_SOLVERS[solver]
    print("Docstring of the function %s:" % solver_function.__name__)
    print(solver_function.__doc__)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Docstring of the function solve_multiple_kernel_ridge_random_search:
    Solve multiple kernel ridge regression using random search.

        Parameters
        ----------
        Ks : array of shape (n_kernels, n_samples, n_samples)
            Input kernels.
        Y : array of shape (n_samples, n_targets)
            Target data.
        n_iter : int, or array of shape (n_iter, n_kernels)
            Number of kernel weights combination to search.
            If an array is given, the solver uses it as the list of kernel weights
            to try, instead of sampling from a Dirichlet distribution.
        concentration : float, or list of float
            Concentration parameters of the Dirichlet distribution.
            If a list, iteratively cycle through the list.
            Not used if n_iter is an array.
        alphas : float or array of shape (n_alphas, )
            Range of ridge regularization parameter.
        score_func : callable
            Function used to compute the score of predictions versus Y.
        cv : int or scikit-learn splitter
            Cross-validation splitter. If an int, KFold is used.
        fit_intercept : boolean
            Whether to fit an intercept. If False, Ks should be centered
            (see KernelCenterer), and Y must be zero-mean over samples.
            Only available if return_weights == 'dual'.
        return_weights : None, 'primal', or 'dual'
            Whether to refit on the entire dataset and return the weights.
        Xs : array of shape (n_kernels, n_samples, n_features) or None
            Necessary if return_weights == 'primal'.
        local_alpha : bool
            If True, alphas are selected per target, else shared over all targets.
        jitter_alphas : bool
            If True, alphas range is slightly jittered for each gamma.
        random_state : int, or None
            Random generator seed. Use an int for deterministic search.
        n_targets_batch : int or None
            Size of the batch for over targets during cross-validation.
            Used for memory reasons. If None, uses all n_targets at once.
        n_targets_batch_refit : int or None
            Size of the batch for over targets during refit.
            Used for memory reasons. If None, uses all n_targets at once.
        n_alphas_batch : int or None
            Size of the batch for over alphas. Used for memory reasons.
            If None, uses all n_alphas at once.
        progress_bar : bool
            If True, display a progress bar over gammas.
        Ks_in_cpu : bool
            If True, keep Ks in CPU memory to limit GPU memory (slower).
            This feature is not available through the scikit-learn API.
        conservative : bool
            If True, when selecting the hyperparameter alpha, take the largest one
            that is less than one standard deviation away from the best.
            If False, take the best.
        Y_in_cpu : bool
            If True, keep the target values ``Y`` in CPU memory (slower).
        diagonalize_method : str in {"eigh", "svd"}
            Method used to diagonalize the kernel.
        return_alphas : bool
            If True, return the best alpha value for each target.

        Returns
        -------
        deltas : array of shape (n_kernels, n_targets)
            Best log kernel weights for each target.
        refit_weights : array or None
            Refit regression weights on the entire dataset, using selected best
            hyperparameters. Refit weights are always stored on CPU memory.
            If return_weights == 'primal', shape is (n_features, n_targets),
            if return_weights == 'dual', shape is (n_samples, n_targets),
            else, None.
        cv_scores : array of shape (n_iter, n_targets)
            Cross-validation scores per iteration, averaged over splits, for the
            best alpha. Cross-validation scores will always be on CPU memory.
        best_alphas : array of shape (n_targets, )
            Best alpha value per target. Only returned if return_alphas is True.
        intercept : array of shape (n_targets,)
            Intercept. Only returned when fit_intercept is True.
    




.. GENERATED FROM PYTHON SOURCE LINES 154-163

The hyperparameter random-search solver separates the hyperparameters into a
shared regularization ``alpha`` and a vector of positive kernel weights which
sum to one. This separation of hyperparameters allows to explore efficiently
a large grid of values for ``alpha`` for each sampled kernel weights vector.

We use *20* random-search iterations to have a reasonably fast example. To
have better results, especially for larger number of feature spaces, one
might need more iterations. (Note that there is currently no stopping
criterion in the random-search method.)

.. GENERATED FROM PYTHON SOURCE LINES 163-167

.. code-block:: default

    n_iter = 20

    alphas = np.logspace(1, 20, 20)








.. GENERATED FROM PYTHON SOURCE LINES 168-171

Batch parameters, used to reduce the necessary GPU memory. A larger value
will be a bit faster, but the solver might crash if it is out of memory.
Optimal values depend on the size of your dataset.

.. GENERATED FROM PYTHON SOURCE LINES 171-175

.. code-block:: default

    n_targets_batch = 200
    n_alphas_batch = 5
    n_targets_batch_refit = 200








.. GENERATED FROM PYTHON SOURCE LINES 176-178

We put all these parameters in a dictionary ``solver_params``, and define
the main estimator ``MultipleKernelRidgeCV``.

.. GENERATED FROM PYTHON SOURCE LINES 178-187

.. code-block:: default


    solver_params = dict(n_iter=n_iter, alphas=alphas,
                         n_targets_batch=n_targets_batch,
                         n_alphas_batch=n_alphas_batch,
                         n_targets_batch_refit=n_targets_batch_refit)

    mkr_model = MultipleKernelRidgeCV(kernels="precomputed", solver=solver,
                                      solver_params=solver_params, cv=cv)








.. GENERATED FROM PYTHON SOURCE LINES 188-196

We need a bit more work than in previous examples before defining the full
pipeline, since the banded ridge model requires `multiple` precomputed
kernels, one for each feature space. To compute them, we use the
``ColumnKernelizer``, which can create multiple kernels from different
column of your features array. ``ColumnKernelizer`` works similarly to
``scikit-learn``'s ``ColumnTransformer``, but instead of returning a
concatenation of transformed features, it returns a stack of kernels,
as required in ``MultipleKernelRidgeCV(kernels="precomputed")``.

.. GENERATED FROM PYTHON SOURCE LINES 198-202

First, we create a different ``Kernelizer`` for each feature space.
Here we use a linear kernel for all feature spaces, but ``ColumnKernelizer``
accepts any ``Kernelizer``, or ``scikit-learn`` ``Pipeline`` ending with a
``Kernelizer``.

.. GENERATED FROM PYTHON SOURCE LINES 202-213

.. code-block:: default

    from himalaya.kernel_ridge import Kernelizer
    from sklearn import set_config
    set_config(display='diagram')  # requires scikit-learn 0.23

    preprocess_pipeline = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[1, 2, 3, 4]),
        Kernelizer(kernel="linear"),
    )
    preprocess_pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 {color: black;background-color: white;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 pre{padding: 0;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-toggleable {background-color: white;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-item {z-index: 1;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-parallel-item:only-child::after {width: 0;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-2b6d94c0-65fa-48f0-938d-0563f6aa19b9" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="90bf6e4f-7bf8-4583-98a4-5c2801041971" type="checkbox" ><label class="sk-toggleable__label" for="90bf6e4f-7bf8-4583-98a4-5c2801041971">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                    ('delayer', Delayer(delays=[1, 2, 3, 4])),
                    ('kernelizer', Kernelizer())])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0bb25e49-ef43-4609-8f87-99c7105a75c2" type="checkbox" ><label class="sk-toggleable__label" for="0bb25e49-ef43-4609-8f87-99c7105a75c2">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e69b966f-b428-46cc-9928-79d525572195" type="checkbox" ><label class="sk-toggleable__label" for="e69b966f-b428-46cc-9928-79d525572195">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8bf3f2ff-c1ac-429d-a76a-31fd2e3d7e5e" type="checkbox" ><label class="sk-toggleable__label" for="8bf3f2ff-c1ac-429d-a76a-31fd2e3d7e5e">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 214-216

The column kernelizer applies a different pipeline on each selection of
features, here defined with ``slices``.

.. GENERATED FROM PYTHON SOURCE LINES 216-226

.. code-block:: default

    from himalaya.kernel_ridge import ColumnKernelizer

    # Find the start and end of each feature space in the concatenated ``X_train``.
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]
    slices





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [slice(0, 1705, None), slice(1705, 8260, None)]



.. GENERATED FROM PYTHON SOURCE LINES 227-235

.. code-block:: default

    kernelizers_tuples = [(name, preprocess_pipeline, slice_)
                          for name, slice_ in zip(feature_names, slices)]
    column_kernelizer = ColumnKernelizer(kernelizers_tuples)
    column_kernelizer

    # (Note that ``ColumnKernelizer`` has a parameter ``n_jobs`` to parallelize
    # each ``Kernelizer``, yet such parallelism does not work with GPU arrays.)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-287f57bf-9a67-4cd9-9170-96973c4f738b {color: black;background-color: white;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b pre{padding: 0;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-toggleable {background-color: white;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-estimator:hover {background-color: #d4ebff;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-item {z-index: 1;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-parallel-item:only-child::after {width: 0;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-287f57bf-9a67-4cd9-9170-96973c4f738b div.sk-container {display: inline-block;position: relative;}</style><div id="sk-287f57bf-9a67-4cd9-9170-96973c4f738b" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f7d3c500-02a5-4288-9ed0-d9d340bf782a" type="checkbox" ><label class="sk-toggleable__label" for="f7d3c500-02a5-4288-9ed0-d9d340bf782a">ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('wordnet',
                                    Pipeline(steps=[('standardscaler',
                                                     StandardScaler(with_std=False)),
                                                    ('delayer',
                                                     Delayer(delays=[1, 2, 3, 4])),
                                                    ('kernelizer', Kernelizer())]),
                                    slice(0, 1705, None)),
                                   ('motion_energy',
                                    Pipeline(steps=[('standardscaler',
                                                     StandardScaler(with_std=False)),
                                                    ('delayer',
                                                     Delayer(delays=[1, 2, 3, 4])),
                                                    ('kernelizer', Kernelizer())]),
                                    slice(1705, 8260, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3d5d652d-15e5-4144-86be-e03cbfd76de7" type="checkbox" ><label class="sk-toggleable__label" for="3d5d652d-15e5-4144-86be-e03cbfd76de7">wordnet</label><div class="sk-toggleable__content"><pre>slice(0, 1705, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d11d3123-aea8-4a6e-9a67-6cdf3a6983f1" type="checkbox" ><label class="sk-toggleable__label" for="d11d3123-aea8-4a6e-9a67-6cdf3a6983f1">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e1db5280-568b-4a77-ae71-efd2ccc58584" type="checkbox" ><label class="sk-toggleable__label" for="e1db5280-568b-4a77-ae71-efd2ccc58584">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="177d181b-5b6b-41d9-b651-185b9622e550" type="checkbox" ><label class="sk-toggleable__label" for="177d181b-5b6b-41d9-b651-185b9622e550">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a2941f8c-3388-4fd0-bcf4-945c43688fda" type="checkbox" ><label class="sk-toggleable__label" for="a2941f8c-3388-4fd0-bcf4-945c43688fda">motion_energy</label><div class="sk-toggleable__content"><pre>slice(1705, 8260, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f26947de-92cd-4cbd-88c9-b0cb6264974d" type="checkbox" ><label class="sk-toggleable__label" for="f26947de-92cd-4cbd-88c9-b0cb6264974d">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9fb6e892-2ad1-48f1-9168-5a2746bad445" type="checkbox" ><label class="sk-toggleable__label" for="9fb6e892-2ad1-48f1-9168-5a2746bad445">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="20853003-4fb0-4a1f-b974-fa04cd1890de" type="checkbox" ><label class="sk-toggleable__label" for="20853003-4fb0-4a1f-b974-fa04cd1890de">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 236-237

Then we can define the model pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 237-244

.. code-block:: default


    pipeline = make_pipeline(
        column_kernelizer,
        mkr_model,
    )
    pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c {color: black;background-color: white;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c pre{padding: 0;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-toggleable {background-color: white;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-estimator:hover {background-color: #d4ebff;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-item {z-index: 1;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-parallel-item:only-child::after {width: 0;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c div.sk-container {display: inline-block;position: relative;}</style><div id="sk-d0db0b8d-6a3f-4064-8225-b0fff46eb83c" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e94a3d71-50b6-43a6-b571-a73e91a14cf1" type="checkbox" ><label class="sk-toggleable__label" for="e94a3d71-50b6-43a6-b571-a73e91a14cf1">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columnkernelizer',
                     ColumnKernelizer(transformers=[('wordnet',
                                                     Pipeline(steps=[('standardscaler',
                                                                      StandardScaler(with_std=False)),
                                                                     ('delayer',
                                                                      Delayer(delays=[1,
                                                                                      2,
                                                                                      3,
                                                                                      4])),
                                                                     ('kernelizer',
                                                                      Kernelizer())]),
                                                     slice(0, 1705, None)),
                                                    ('motion_energy',
                                                     Pipeline(steps=[('standardscaler',
                                                                      StandardScaler(with_std=False)),
                                                                     ('delayer',
                                                                      Delayer(delays=[1,
                                                                                      2,
                                                                                      3,
                                                                                      4]...
                     MultipleKernelRidgeCV(cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([2700, 2701, ..., 2998, 2999])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149... 2401, ..., 2698, 2699])), (array([ 300,  301, ..., 3598, 3599]), array([  0,   1, ..., 298, 299]))]),
                                           kernels='precomputed',
                                           solver_params={'alphas': array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                                          'n_alphas_batch': 5,
                                                          'n_iter': 20,
                                                          'n_targets_batch': 200,
                                                          'n_targets_batch_refit': 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e154012-7160-42e1-870e-bdf0e65b30f4" type="checkbox" ><label class="sk-toggleable__label" for="7e154012-7160-42e1-870e-bdf0e65b30f4">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('wordnet',
                                    Pipeline(steps=[('standardscaler',
                                                     StandardScaler(with_std=False)),
                                                    ('delayer',
                                                     Delayer(delays=[1, 2, 3, 4])),
                                                    ('kernelizer', Kernelizer())]),
                                    slice(0, 1705, None)),
                                   ('motion_energy',
                                    Pipeline(steps=[('standardscaler',
                                                     StandardScaler(with_std=False)),
                                                    ('delayer',
                                                     Delayer(delays=[1, 2, 3, 4])),
                                                    ('kernelizer', Kernelizer())]),
                                    slice(1705, 8260, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2b17ccf3-ff9f-487d-b82b-fcc0b066a2bb" type="checkbox" ><label class="sk-toggleable__label" for="2b17ccf3-ff9f-487d-b82b-fcc0b066a2bb">wordnet</label><div class="sk-toggleable__content"><pre>slice(0, 1705, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1d1970f4-ea82-4628-b521-703b376608b9" type="checkbox" ><label class="sk-toggleable__label" for="1d1970f4-ea82-4628-b521-703b376608b9">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="be6ad5cf-f943-4e7c-a315-fe4d6fc8fd75" type="checkbox" ><label class="sk-toggleable__label" for="be6ad5cf-f943-4e7c-a315-fe4d6fc8fd75">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a70c1a76-91f0-46fc-b02c-8cf77ebcf941" type="checkbox" ><label class="sk-toggleable__label" for="a70c1a76-91f0-46fc-b02c-8cf77ebcf941">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7e80db48-1498-4a6b-81d5-d88241126b09" type="checkbox" ><label class="sk-toggleable__label" for="7e80db48-1498-4a6b-81d5-d88241126b09">motion_energy</label><div class="sk-toggleable__content"><pre>slice(1705, 8260, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="feddfe07-6e66-4df4-8b3f-4dd78bde69f0" type="checkbox" ><label class="sk-toggleable__label" for="feddfe07-6e66-4df4-8b3f-4dd78bde69f0">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="421addf9-1568-4b60-b900-021eef43fd8b" type="checkbox" ><label class="sk-toggleable__label" for="421addf9-1568-4b60-b900-021eef43fd8b">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5c5cb332-330a-4f28-9860-ec3d04821f29" type="checkbox" ><label class="sk-toggleable__label" for="5c5cb332-330a-4f28-9860-ec3d04821f29">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2bf9c3f5-c546-4dfc-937c-795949bf28e6" type="checkbox" ><label class="sk-toggleable__label" for="2bf9c3f5-c546-4dfc-937c-795949bf28e6">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([2700, 2701, ..., 2998, 2999])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149... 2401, ..., 2698, 2699])), (array([ 300,  301, ..., 3598, 3599]), array([  0,   1, ..., 298, 299]))]),
                          kernels='precomputed',
                          solver_params={'alphas': array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                         'n_alphas_batch': 5, 'n_iter': 20,
                                         'n_targets_batch': 200,
                                         'n_targets_batch_refit': 200})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 245-252

Fit the model
-------------

We fit on the train set, and score on the test set.

With a GPU backend, the fitting of this model takes around 6 minutes. With a
CPU backend, it can last 10 times more.

.. GENERATED FROM PYTHON SOURCE LINES 252-260

.. code-block:: default


    pipeline.fit(X_train, Y_train)

    scores = pipeline.score(X_test, Y_test)
    scores = backend.to_numpy(scores)

    print("(n_voxels,) =", scores.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 20 random sampling with cv |     [..                                      ] 5% | 40.58 sec | 20 random sampling with cv |     [....                                    ] 10% | 70.87 sec | 20 random sampling with cv |     [......                                  ] 15% | 101.59 sec | 20 random sampling with cv |     [........                                ] 20% | 131.51 sec | 20 random sampling with cv |     [..........                              ] 25% | 161.34 sec | 20 random sampling with cv |     [............                            ] 30% | 190.97 sec | 20 random sampling with cv |     [..............                          ] 35% | 220.09 sec | 20 random sampling with cv |     [................                        ] 40% | 249.26 sec | 20 random sampling with cv |     [..................                      ] 45% | 278.31 sec | 20 random sampling with cv |     [....................                    ] 50% | 307.19 sec | 20 random sampling with cv |     [......................                  ] 55% | 335.89 sec | 20 random sampling with cv |     [........................                ] 60% | 364.85 sec | 20 random sampling with cv |     [..........................              ] 65% | 393.88 sec | 20 random sampling with cv |     [............................            ] 70% | 422.97 sec | 20 random sampling with cv |     [..............................          ] 75% | 451.88 sec | 20 random sampling with cv |     [................................        ] 80% | 480.85 sec | 20 random sampling with cv |     [..................................      ] 85% | 509.59 sec | 20 random sampling with cv |     [....................................    ] 90% | 538.53 sec | 20 random sampling with cv |     [......................................  ] 95% | 568.04 sec | 20 random sampling with cv |     [........................................] 100% | 597.01 sec | 20 random sampling with cv | 
    (n_voxels,) = (84038,)




.. GENERATED FROM PYTHON SOURCE LINES 261-267

Compare with a ridge model
--------------------------

We can compare with a baseline model, which does not use one hyperparameter
per feature space, but instead shares the same hyperparameter for all feature
spaces.

.. GENERATED FROM PYTHON SOURCE LINES 267-281

.. code-block:: default


    from himalaya.kernel_ridge import KernelRidgeCV

    pipeline_baseline = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[1, 2, 3, 4]),
        KernelRidgeCV(
            alphas=alphas, cv=cv,
            solver_params=dict(n_targets_batch=n_targets_batch,
                               n_alphas_batch=n_alphas_batch,
                               n_targets_batch_refit=n_targets_batch_refit)),
    )
    pipeline_baseline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-2980a362-2f62-4bf2-8544-54e6047bec69 {color: black;background-color: white;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 pre{padding: 0;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-toggleable {background-color: white;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.2em 0.3em;box-sizing: border-box;text-align: center;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;margin: 0.25em 0.25em;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-estimator:hover {background-color: #d4ebff;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-item {z-index: 1;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-parallel-item:only-child::after {width: 0;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0.2em;box-sizing: border-box;padding-bottom: 0.1em;background-color: white;position: relative;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-2980a362-2f62-4bf2-8544-54e6047bec69 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-2980a362-2f62-4bf2-8544-54e6047bec69" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9e3af5cb-bd7e-40f3-a896-eb456e3f21a4" type="checkbox" ><label class="sk-toggleable__label" for="9e3af5cb-bd7e-40f3-a896-eb456e3f21a4">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                    ('delayer', Delayer(delays=[1, 2, 3, 4])),
                    ('kernelridgecv',
                     KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                   cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array...9])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149... 2401, ..., 2698, 2699])), (array([ 300,  301, ..., 3598, 3599]), array([  0,   1, ..., 298, 299]))]),
                                   solver_params={'n_alphas_batch': 5,
                                                  'n_targets_batch': 200,
                                                  'n_targets_batch_refit': 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="decd66a8-8da5-4a19-a2c2-f24aba3c387a" type="checkbox" ><label class="sk-toggleable__label" for="decd66a8-8da5-4a19-a2c2-f24aba3c387a">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="87e92ed5-ef8a-4c05-bdbb-b7465f492ee6" type="checkbox" ><label class="sk-toggleable__label" for="87e92ed5-ef8a-4c05-bdbb-b7465f492ee6">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="46ce86bf-027a-4ae5-b7a0-6e1f4edbed9c" type="checkbox" ><label class="sk-toggleable__label" for="46ce86bf-027a-4ae5-b7a0-6e1f4edbed9c">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                  cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([2700, 2701, ..., 2998, 2999])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([1800, 1801, ..., 2098, 2099])), (array([   0,    1, ..., 3598, 3599]), array([1200, 1201, ..., 149... 2401, ..., 2698, 2699])), (array([ 300,  301, ..., 3598, 3599]), array([  0,   1, ..., 298, 299]))]),
                  solver_params={'n_alphas_batch': 5, 'n_targets_batch': 200,
                                 'n_targets_batch_refit': 200})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 282-286

.. code-block:: default

    pipeline_baseline.fit(X_train, Y_train)
    scores_baseline = pipeline_baseline.score(X_test, Y_test)
    scores_baseline = backend.to_numpy(scores_baseline)








.. GENERATED FROM PYTHON SOURCE LINES 287-292

Here we plot the comparison of model prediction accuracies with a 2D histogram.
All 70k voxels are represented in this histogram, where the diagonal
corresponds to identical model prediction accuracy for both models. A distibution deviating
from the diagonal means that one model has better predictive performance
than the other.

.. GENERATED FROM PYTHON SOURCE LINES 292-300

.. code-block:: default

    import matplotlib.pyplot as plt
    from voxelwise_tutorials.viz import plot_hist2d

    ax = plot_hist2d(scores_baseline, scores)
    ax.set(title='Generalization R2 scores', xlabel='KernelRidgeCV',
           ylabel='MultipleKernelRidgeCV')
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_05_plot_banded_ridge_model_001.png
    :alt: Generalization R2 scores
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 301-307

We see that the banded ridge model (``MultipleKernelRidgeCV``) outperforms
the ridge model (``KernelRidegeCV``). Indeed, banded ridge regression is able
to find the optimal scalings of each feature space, independently on each
voxel. Banded ridge regression is thus able to perform a soft selection
between the available feature spaces, based on the cross-validation
performances.

.. GENERATED FROM PYTHON SOURCE LINES 309-325

Plot the banded ridge split
---------------------------

On top of better prediction accuracy, banded ridge regression also gives a
way to disentangle the contribution of the two feature spaces. To do so, we
take the kernel weights and the ridge (dual) weights corresponding to each
feature space, and use them to compute the prediction from each feature space
separately.

.. math::

      \hat{y} = \sum_i^m \hat{y}_i = \sum_i^m \gamma_i K_i \hat{w}

Then, we use these split predictions to compute split :math:`\tilde{R}^2_i`
scores. These scores are corrected so that their sum is equal to the
:math:`R^2` score of the full prediction :math:`\hat{y}`.

.. GENERATED FROM PYTHON SOURCE LINES 325-335

.. code-block:: default


    from himalaya.scoring import r2_score_split

    Y_test_pred_split = pipeline.predict(X_test, split=True)
    split_scores = r2_score_split(Y_test, Y_test_pred_split)
    split_scores.shape

    print("(n_kernels, n_samples_test, n_voxels) =", Y_test_pred_split.shape)
    print("(n_kernels, n_voxels) =", split_scores.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_kernels, n_samples_test, n_voxels) = torch.Size([2, 270, 84038])
    (n_kernels, n_voxels) = torch.Size([2, 84038])




.. GENERATED FROM PYTHON SOURCE LINES 336-337

We can then plot the split scores on a flatmap with a 2D colormap.

.. GENERATED FROM PYTHON SOURCE LINES 337-347

.. code-block:: default


    from voxelwise_tutorials.viz import plot_2d_flatmap_from_mapper

    mapper_file = os.path.join(directory, "mappers", f"{subject}_mappers.hdf")
    ax = plot_2d_flatmap_from_mapper(split_scores[0], split_scores[1],
                                     mapper_file, vmin=0, vmax=0.25, vmin2=0,
                                     vmax2=0.5, label_1=feature_names[0],
                                     label_2=feature_names[1])
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_05_plot_banded_ridge_model_002.png
    :alt: 05 plot banded ridge model
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 348-360

The blue regions are better predicted by the motion-energy features, the orange
regions are better predicted by the wordnet features, and the white regions are
well predicted by both feature spaces.

Compared to the last figure of the previous example, we see that most white
regions have been replaced by either blue or orange regions. The
banded ridge regression disentangled the two feature spaces in voxels where
both feature spaces had good prediction accuracy (see previous example). For
example, motion-energy features predict brain activity in early visual
cortex, while wordnet features predict in semantic visual areas. For more
discussions about these results, we refer the reader to the original
publication [1]_.

.. GENERATED FROM PYTHON SOURCE LINES 362-368

References
----------

.. [1] Nunez-Elizalde, A. O., Huth, A. G., & Gallant, J. L. (2019).
    Voxelwise encoding models with non-spherical multivariate normal priors.
    Neuroimage, 197, 482-492.

.. GENERATED FROM PYTHON SOURCE LINES 368-370

.. code-block:: default


    del pipeline, pipeline_baseline








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 10 minutes  55.179 seconds)


.. _sphx_glr_download__auto_examples_movies_3T_05_plot_banded_ridge_model.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 05_plot_banded_ridge_model.py <05_plot_banded_ridge_model.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 05_plot_banded_ridge_model.ipynb <05_plot_banded_ridge_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
