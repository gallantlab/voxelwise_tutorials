
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/movies_3T/04_plot_motion_energy_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_movies_3T_04_plot_motion_energy_model.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_movies_3T_04_plot_motion_energy_model.py:


=============================================
Fit a ridge model with motion energy features
=============================================

In this example, we model the fMRI responses with motion-energy features
extracted from the movie stimulus. The model is a regularized linear regression
model.

This tutorial reproduces part of the analysis described in Nishimoto et al
(2011) [1]_. See this publication for more details about the experiment, the
motion-energy features, along with more results and more discussions.

*Motion-energy features:* Motion-energy features result from filtering a video
stimulus with spatio-temporal Gabor filters. A pyramid of filters is used to
compute the motion-energy features at multiple spatial and temporal scales.
Motion-energy features were introduced in [1]_.

*Summary:* As in the previous example, we first concatenate the features with
multiple delays, to account for the slow hemodynamic response. A linear
regression model then weights each delayed feature with a different weight, to
build a predictive model of BOLD activity. Again, the linear regression is
regularized to improve robustness to correlated features and to improve
generalization. The optimal regularization hyperparameter is selected
independently on each voxel over a grid-search with cross-validation. Finally,
the model generalization performance is evaluated on a held-out test set,
comparing the model predictions with the ground-truth fMRI responses.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

Path of the data directory
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 32-37

.. code-block:: default

    import os
    from voxelwise_tutorials.io import get_data_home
    directory = os.path.join(get_data_home(), "vim-5")
    print(directory)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/jlg/tomdlt/voxelwise_tutorials_data/vim-5




.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    # modify to use another subject
    subject = "S01"








.. GENERATED FROM PYTHON SOURCE LINES 43-47

Load the data
-------------

We first load the fMRI responses.

.. GENERATED FROM PYTHON SOURCE LINES 47-58

.. code-block:: default

    import numpy as np

    from voxelwise_tutorials.io import load_hdf5_array

    file_name = os.path.join(directory, "responses", f"{subject}_responses.hdf")
    Y_train = load_hdf5_array(file_name, key="Y_train")
    Y_test = load_hdf5_array(file_name, key="Y_test")

    print("(n_samples_train, n_voxels) =", Y_train.shape)
    print("(n_repeats, n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_voxels) = (3600, 84038)
    (n_repeats, n_samples_test, n_voxels) = (10, 270, 84038)




.. GENERATED FROM PYTHON SOURCE LINES 59-61

We average the test repeats, to remove the non-repeatable part of fMRI
responses.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: default

    Y_test = Y_test.mean(0)

    print("(n_samples_test, n_voxels) =", Y_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_test, n_voxels) = (270, 84038)




.. GENERATED FROM PYTHON SOURCE LINES 66-67

We fill potential NaN (not-a-number) values with zeros.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: default

    Y_train = np.nan_to_num(Y_train)
    Y_test = np.nan_to_num(Y_test)








.. GENERATED FROM PYTHON SOURCE LINES 71-72

Then we load the precomputed "motion-energy" features.

.. GENERATED FROM PYTHON SOURCE LINES 72-81

.. code-block:: default


    feature_space = "motion_energy"
    file_name = os.path.join(directory, "features", f"{feature_space}.hdf")
    X_train = load_hdf5_array(file_name, key="X_train")
    X_test = load_hdf5_array(file_name, key="X_test")

    print("(n_samples_train, n_features) =", X_train.shape)
    print("(n_samples_test, n_features) =", X_test.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_samples_train, n_features) = (3600, 6555)
    (n_samples_test, n_features) = (270, 6555)




.. GENERATED FROM PYTHON SOURCE LINES 82-87

Define the cross-validation scheme
----------------------------------

We define the same leave-one-run-out cross-validation split as in the
previous example.

.. GENERATED FROM PYTHON SOURCE LINES 87-95

.. code-block:: default


    from sklearn.model_selection import check_cv
    from voxelwise_tutorials.utils import generate_leave_one_run_out

    # indice of first sample of each run
    run_onsets = load_hdf5_array(file_name, key="run_onsets")
    print(run_onsets)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [   0  300  600  900 1200 1500 1800 2100 2400 2700 3000 3300]




.. GENERATED FROM PYTHON SOURCE LINES 96-97

We define a cross-validation splitter, compatible with ``scikit-learn`` API.

.. GENERATED FROM PYTHON SOURCE LINES 97-101

.. code-block:: default

    n_samples_train = X_train.shape[0]
    cv = generate_leave_one_run_out(n_samples_train, run_onsets)
    cv = check_cv(cv)  # copy the cross-validation splitter into a reusable list








.. GENERATED FROM PYTHON SOURCE LINES 102-107

Define the model
----------------

We define the same model as in the previous example. See the previous
example for more details about the model definition.

.. GENERATED FROM PYTHON SOURCE LINES 107-129

.. code-block:: default


    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    from voxelwise_tutorials.delayer import Delayer
    from himalaya.kernel_ridge import KernelRidgeCV
    from himalaya.backend import set_backend
    backend = set_backend("torch_cuda", on_error="warn")

    X_train = X_train.astype("float32")
    X_test = X_test.astype("float32")

    alphas = np.logspace(1, 20, 20)

    pipeline = make_pipeline(
        StandardScaler(with_mean=True, with_std=False),
        Delayer(delays=[1, 2, 3, 4]),
        KernelRidgeCV(
            alphas=alphas, cv=cv,
            solver_params=dict(n_targets_batch=500, n_alphas_batch=5,
                               n_targets_batch_refit=100)),
    )








.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: default

    from sklearn import set_config
    set_config(display='diagram')  # requires scikit-learn 0.23
    pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 {color: black;background-color: white;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 pre{padding: 0;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-toggleable {background-color: white;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-item {z-index: 1;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-parallel-item:only-child::after {width: 0;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-eefd9cbe-ac54-470b-9855-61c1579f97e3 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-eefd9cbe-ac54-470b-9855-61c1579f97e3" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="89902438-72ac-4c76-b792-a53d1cd84e17" type="checkbox" ><label class="sk-toggleable__label" for="89902438-72ac-4c76-b792-a53d1cd84e17">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('standardscaler', StandardScaler(with_std=False)),
                    ('delayer', Delayer(delays=[1, 2, 3, 4])),
                    ('kernelridgecv',
                     KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                                   cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array...99])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([2400, 2401, ..., 2698, 2699])), (array([   0,    1, ..., 3598, 3599]), array([2700, 2701, ..., 299...1, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([ 900,  901, ..., 1198, 1199]))]),
                                   solver_params={'n_alphas_batch': 5,
                                                  'n_targets_batch': 500,
                                                  'n_targets_batch_refit': 100}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f14ec0f4-89f5-4559-a5dc-99afeaca6e74" type="checkbox" ><label class="sk-toggleable__label" for="f14ec0f4-89f5-4559-a5dc-99afeaca6e74">StandardScaler</label><div class="sk-toggleable__content"><pre>StandardScaler(with_std=False)</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bd734b4c-2091-4b7e-b2da-1761e791cc94" type="checkbox" ><label class="sk-toggleable__label" for="bd734b4c-2091-4b7e-b2da-1761e791cc94">Delayer</label><div class="sk-toggleable__content"><pre>Delayer(delays=[1, 2, 3, 4])</pre></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a3b1b6ad-4a2e-478e-933e-fee5fe07eb83" type="checkbox" ><label class="sk-toggleable__label" for="a3b1b6ad-4a2e-478e-933e-fee5fe07eb83">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05, 1.e+06, 1.e+07, 1.e+08,
           1.e+09, 1.e+10, 1.e+11, 1.e+12, 1.e+13, 1.e+14, 1.e+15, 1.e+16,
           1.e+17, 1.e+18, 1.e+19, 1.e+20]),
                  cv=_CVIterableWrapper(cv=[(array([   0,    1, ..., 3598, 3599]), array([2100, 2101, ..., 2398, 2399])), (array([   0,    1, ..., 3598, 3599]), array([300, 301, ..., 598, 599])), (array([   0,    1, ..., 3598, 3599]), array([2400, 2401, ..., 2698, 2699])), (array([   0,    1, ..., 3598, 3599]), array([2700, 2701, ..., 299...1, ..., 3598, 3599])), (array([   0,    1, ..., 3598, 3599]), array([ 900,  901, ..., 1198, 1199]))]),
                  solver_params={'n_alphas_batch': 5, 'n_targets_batch': 500,
                                 'n_targets_batch_refit': 100})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 135-139

Fit the model
-------------

We fit on the train set, and score on the test set.

.. GENERATED FROM PYTHON SOURCE LINES 139-147

.. code-block:: default


    pipeline.fit(X_train, Y_train)

    scores_motion_energy = pipeline.score(X_test, Y_test)
    scores_motion_energy = backend.to_numpy(scores_motion_energy)

    print("(n_voxels,) =", scores_motion_energy.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (n_voxels,) = (84038,)




.. GENERATED FROM PYTHON SOURCE LINES 148-151

Plot the model performances
---------------------------
The performances are computed using the math:`R^2` scores.

.. GENERATED FROM PYTHON SOURCE LINES 151-160

.. code-block:: default


    import matplotlib.pyplot as plt
    from voxelwise_tutorials.viz import plot_flatmap_from_mapper

    mapper_file = os.path.join(directory, "mappers", f"{subject}_mappers.hdf")
    ax = plot_flatmap_from_mapper(scores_motion_energy, mapper_file, vmin=0,
                                  vmax=0.5)
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_04_plot_motion_energy_model_001.png
    :alt: 04 plot motion energy model
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-164

The motion-energy features lead to large generalization scores in the
early visual cortex (V1, V2, V3, ...). For more discussions about these
results, we refer the reader to the original publication [1]_.

.. GENERATED FROM PYTHON SOURCE LINES 166-172

Compare with the wordnet model
------------------------------

Interestingly, the motion-energy model performs well in different brain
regions than the semantic "wordnet" model fitted in the previous example. To
compare the two models, we first need to fit again the wordnet model.

.. GENERATED FROM PYTHON SOURCE LINES 172-181

.. code-block:: default


    feature_space = "wordnet"
    file_name = os.path.join(directory, "features", f"{feature_space}.hdf")
    X_train = load_hdf5_array(file_name, key="X_train")
    X_test = load_hdf5_array(file_name, key="X_test")

    X_train = X_train.astype("float32")
    X_test = X_test.astype("float32")








.. GENERATED FROM PYTHON SOURCE LINES 182-184

We can create an unfitted copy of the pipeline with the ``clone`` function,
or simply call fit again if we do not need to reuse the previous model.

.. GENERATED FROM PYTHON SOURCE LINES 184-190

.. code-block:: default


    if False:
        from sklearn.base import clone
        pipeline_wordnet = clone(pipeline)
        pipeline_wordnet








.. GENERATED FROM PYTHON SOURCE LINES 191-199

.. code-block:: default

    pipeline.fit(X_train, Y_train)
    scores_wordnet = pipeline.score(X_test, Y_test)
    scores_wordnet = backend.to_numpy(scores_wordnet)

    ax = plot_flatmap_from_mapper(scores_wordnet, mapper_file, vmin=0,
                                  vmax=0.5)
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_04_plot_motion_energy_model_002.png
    :alt: 04 plot motion energy model
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 200-205

We can also plot the comparison of model prediction accuracies with a 2D
histogram. All ~70k voxels are represented in this histogram, where the
diagonal corresponds to identical prediction accuracy for both models. A
distibution deviating from the diagonal means that one model has better
predictive performance than the other.

.. GENERATED FROM PYTHON SOURCE LINES 205-213

.. code-block:: default


    from voxelwise_tutorials.viz import plot_hist2d

    ax = plot_hist2d(scores_wordnet, scores_motion_energy)
    ax.set(title='Generalization R2 scores', xlabel='semantic wordnet model',
           ylabel='motion energy model')
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_04_plot_motion_energy_model_003.png
    :alt: Generalization R2 scores
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 214-217

Interestingly, the well predicted voxels are different in the two models.
To further describe these differences, we can plot both performances on the
same flatmap, using a 2D colormap.

.. GENERATED FROM PYTHON SOURCE LINES 217-227

.. code-block:: default


    from voxelwise_tutorials.viz import plot_2d_flatmap_from_mapper

    mapper_file = os.path.join(directory, "mappers", f"{subject}_mappers.hdf")
    ax = plot_2d_flatmap_from_mapper(scores_wordnet, scores_motion_energy,
                                     mapper_file, vmin=0, vmax=0.25, vmin2=0,
                                     vmax2=0.5, label_1="wordnet",
                                     label_2="motion energy")
    plt.show()




.. image:: /_auto_examples/movies_3T/images/sphx_glr_04_plot_motion_energy_model_004.png
    :alt: 04 plot motion energy model
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 228-250

The blue regions are well predicted by the motion-energy features, the orange
regions are well predicted by the wordnet features, and the white regions are
well predicted by both feature spaces.

A large part of the visual semantic areas are not only well predicted by the
wordnet features, but also by the motion-energy features, as indicated by the
white color. Since these two features spaces encode quite different
information, two interpretations are possible. In the first interpretation,
the two feature spaces encode complementary information, and could be used
jointly to further increase the generalization performance. In the second
interpretation, both feature spaces encode the same information, because of
spurious stimulus correlations. For example, imagine that the visual stimulus
contained faces that appeared consistetly in the same portion of the visual
field. In this case, position in the visual field would be perfectly
correlated with the "face" semantic category. Thus, motion-energy features
could predict responses in face-responsive areas without encoding any
semantic information.

To better disentangle the two feature spaces, we developed a joint model
called `banded ridge regression` [2]_, which fits multiple feature spaces
simultaneously with optimal regularization for each feature space. This model
is described in the next example.

.. GENERATED FROM PYTHON SOURCE LINES 252-262

References
----------

.. [1] Nishimoto, S., Vu, A. T., Naselaris, T., Benjamini, Y., Yu,
    B., & Gallant, J. L. (2011). Reconstructing visual experiences from brain
    activity evoked by natural movies. Current Biology, 21(19), 1641-1646.

.. [2] Nunez-Elizalde, A. O., Huth, A. G., & Gallant, J. L. (2019).
    Voxelwise encoding models with non-spherical multivariate normal priors.
    Neuroimage, 197, 482-492.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  56.540 seconds)


.. _sphx_glr_download__auto_examples_movies_3T_04_plot_motion_energy_model.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 04_plot_motion_energy_model.py <04_plot_motion_energy_model.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 04_plot_motion_energy_model.ipynb <04_plot_motion_energy_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
